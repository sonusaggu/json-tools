document.addEventListener("DOMContentLoaded",function(){const e=document.getElementById("mergeBtn"),t=document.getElementById("addJsonBtn"),n=document.getElementById("clearBtn"),r=document.getElementById("sampleBtn"),s=document.getElementById("copyBtn"),a=document.getElementById("mergeStrategy"),i=document.getElementById("jsonInputsContainer"),o=document.getElementById("jsonOutput"),c=document.getElementById("errorContainer"),l=document.getElementById("errorList"),d=document.getElementById("outputLineNumbers"),u=[{id:1,name:"First Object",commonProperty:"Value from first",nested:{a:1,b:2},array:[1,2,3]},{id:2,name:"Second Object",commonProperty:"Value from second",nested:{b:20,c:30},array:[4,5,6],additionalProperty:"Only in second"}];function m(e=""){const t=document.querySelectorAll(".json-input-wrapper").length,n=document.createElement("div");n.className="json-input-wrapper",n.innerHTML=`\n            <div class="editor-header">\n                <span>JSON ${t+1}</span>\n                <button class="btn small danger remove-json-btn" data-index="${t}">\n                    <i class="fas fa-times"></i> Remove\n                </button>\n            </div>\n            <div class="editor-wrapper">\n                <div class="line-numbers">1</div>\n                <textarea class="merger-json-input" placeholder='Paste JSON here' spellcheck="false">${e}</textarea>\n            </div>\n        `,i.appendChild(n),n.querySelector(".remove-json-btn").addEventListener("click",function(){n.remove(),document.querySelectorAll(".json-input-wrapper").forEach((e,t)=>{e.querySelector("span").textContent=`JSON ${t+1}`,e.querySelector(".remove-json-btn").setAttribute("data-index",t)})});const r=n.querySelector("textarea"),s=n.querySelector(".line-numbers");function a(){const e=r.value.split("\n");let t="";for(let n=0;n<e.length;n++)t+=n+1+"<br>";s.innerHTML=t}r.addEventListener("input",a),a()}function v(e,t=[],n=""){const r=e=>e&&"object"==typeof e&&!Array.isArray(e);return e.reduce((s,i,o)=>i?(Object.keys(i).forEach(o=>{const c=n?`${n}.${o}`:o;s.hasOwnProperty(o)?r(s[o])&&r(i[o])?s[o]=v([s[o],i[o]],t,c):Array.isArray(s[o])&&Array.isArray(i[o])?"concat"===a.value?s[o]=[...s[o],...i[o]]:(s[o]=i[o],t.push({key:c,values:[s[o],i[o]],resolved:"used latter value"})):(JSON.stringify(s[o])!==JSON.stringify(i[o])&&t.push({key:c,values:e.map(e=>e?e[o]:void 0),resolved:"used latter value"}),s[o]=i[o]):s[o]=i[o]}),s):s,{})}function p(e,t=[]){const n=e=>e&&"object"==typeof e,r=e=>Array.isArray(e);return e.reduce((s,a)=>a?(Object.keys(a).forEach(i=>{s.hasOwnProperty(i)?n(s[i])&&n(a[i])&&!r(s[i])&&!r(a[i])?s[i]=p([s[i],a[i]],t):r(s[i])&&r(a[i])?s[i]=[...s[i],...a[i]]:(t.push({key:i,values:e.map(e=>e?e[i]:void 0),resolved:"used latter value"}),s[i]=a[i]):s[i]=a[i]}),s):s,{})}new MutationObserver(function(e){!function(){const e=o.textContent.split("\n");let t="";for(let n=0;n<e.length;n++)t+=n+1+"<br>";d.innerHTML=t}()}).observe(o,{childList:!0,subtree:!0,characterData:!0}),t.addEventListener("click",function(){m()}),n.addEventListener("click",function(){i.innerHTML="",o.textContent="Merged JSON will appear here...",c.classList.remove("visible"),m(),m()}),r.addEventListener("click",function(){i.innerHTML="",u.forEach(e=>{m(JSON.stringify(e,null,2))})}),s.addEventListener("click",function(){const e=o.textContent;navigator.clipboard.writeText(e).then(()=>{const e=s.querySelector("i");e.classList.replace("far","fas"),setTimeout(()=>e.classList.replace("fas","far"),2e3)})}),e.addEventListener("click",function(){const e=document.querySelectorAll(".merger-json-input"),t=[],n=[];if(e.forEach((e,r)=>{try{e.value.trim()&&t.push(JSON.parse(e.value))}catch(e){n.push({index:r+1,error:e})}}),n.length>0)return l.innerHTML="",n.forEach(e=>{const t=document.createElement("div");t.className="error-item",t.innerHTML=`\n                    <span class="error-position">JSON ${e.index}:</span>\n                    <span class="error-message">${e.error.message}</span>\n                `,l.appendChild(t)}),c.classList.add("visible"),void(o.textContent="Fix JSON errors before merging");if(t.length<2)return o.textContent="At least 2 valid JSON inputs are required for merging",void c.classList.remove("visible");c.classList.remove("visible");const r=a.value;let s;const i=[];try{switch(r){case"deep":default:s=v(t,i);break;case"shallow":s=Object.assign({},...t);break;case"concat":s=p(t,i);break;case"replace":d=t,s=Object.assign({},...d)}o.textContent=JSON.stringify(s,null,4),i.length>0&&(l.innerHTML="",i.forEach(e=>{const t=document.createElement("div");t.className="conflict-item";const n=e.values.map((e,t)=>`<div class="conflict-value">JSON ${t+1}: ${JSON.stringify(e)}</div>`).join("");t.innerHTML=`\n                        <div class="conflict-key">Conflict at "${e.key}"</div>\n                        <div class="conflict-values">${n}</div>\n                        <div>Resolved with: ${e.resolved}</div>\n                    `,l.appendChild(t)}),c.classList.add("visible"))}catch(e){o.innerHTML=`<span class="invalid">âœ— Merge failed: ${e.message}</span>`}var d})});